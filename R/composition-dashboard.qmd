---
title: "Sample Data Table"
output: html_document
format: html
runtime: shiny
---

```{r setup, include=FALSE}
library(DT)
library(dplyr)
library(shiny)
library(tidyr)
```


```{r load_libraries, echo = FALSE}
# Load data from GitHub raw link
info <- read.csv("https://raw.githubusercontent.com/AlicenJoyHenning/TB_BAL/refs/heads/master/data/annotated_object.csv")

```

```{r generate_table, echo=FALSE}

# Prepare data
summarized <- info %>%
  select(sample, orig.ident, annotation) %>%
  count(orig.ident, sample, annotation) %>%
  pivot_wider(names_from = annotation, values_from = n, values_fill = 0) %>%
  arrange(sample)

# UI elements (Dropdown Select for filtering)
ui <- fluidPage(
  
  # Dropdown for selecting PBMC/BAL/All
  selectInput("origin_select", "Select Origin:",
              choices = c("PBMC", "BAL", "All"),
              selected = "All"),
  
  # Dropdown for selecting sample names (orig.ident)
  selectInput("sample_select", "Select Sample:",
              choices = unique(summarized$orig.ident),
              selected = unique(summarized$orig.ident)[1],  # Default to the first sample
              multiple = TRUE),
  
  # Table display for the summarized data
  DTOutput("table")
)

# Server logic
server <- function(input, output) {
  
  # Reactive data based on input selection
  filtered_data <- reactive({
    data <- summarized
    
    # Filter based on selected origin
    if (input$origin_select != "All") {
      data <- data %>%
        filter(grepl(input$origin_select, orig.ident))  # Match either "BAL" or "PBMC"
    }
    
    # Filter based on selected samples (orig.ident)
    if (length(input$sample_select) > 0) {
      data <- data %>%
        filter(orig.ident %in% input$sample_select)
    }
    
    return(data)
  })
  
  # Render the table
  output$table <- renderDT({
    datatable(
      filtered_data(),
      options = list(pageLength = 20, scrollX = TRUE)
    )
  })
}

# Run the application
shinyApp(ui = ui, server = server)

```